name: Validate

on:
  push:
    branches: ["master"]
  pull_request:
  workflow_dispatch:

env:
  FORCE_COLOR: 1
  XDG_CACHE_HOME: ${{ github.workspace }}/cache
  DEFAULT_PYTHON: "3.7"

jobs:
  validate:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        # python-version: ["3.7", "3.8", "3.9", "3.10"]
        # , "3.8", "3.9", "3.10"
        # , windows-latest
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        include:
          - python-version: "3.7"
            os: ubuntu-latest
            extensive-tests: true
          - python-version: "3.8"
            os: ubuntu-latest
            # TOXENV: "py38,docs"
          - python-version: "3.9"
            os: ubuntu-latest
            run-flake8: true
            EXTRA_COMMAND: "flake8 --exit-zero rdflib"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/setup-java@v2
        if: ${{ matrix.extensive-tests }}
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup env
        shell: bash
        run: |
          echo "MATRIX_PYTHON_VERSION=${{ matrix.python-version }}" >> ${GITHUB_ENV}
      - name: Get pip cache dir
        id: pip-cache
        shell: bash
        run: |
          python -m ensurepip --upgrade
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}-v1-${{
            hashFiles('**/setup.py', '**/requirements*.txt') }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}-v1-
      - name: Cache xdg
        uses: actions/cache@v2
        with:
          path: ${{ env.XDG_CACHE_HOME }}
          key: ${{ matrix.os }}-xdg-v1-${{ hashFiles('**/with-fuseki.sh') }}
          restore-keys: |
            ${{ matrix.os }}-xdg-v1-
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade virtualenv "tox<4" tox-gh-actions
      - name: Install extra dev dependencies
        if: ${{ matrix.extensive-tests }}
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]
          then
              sudo apt-get install -y libdb-dev
          elif [ "${{ matrix.os }}" == "macos-latest" ]
          then
              brew install berkeley-db@4
              export BERKELEYDB_DIR=$(brew --prefix berkeley-db@4)
          fi
      - name: Validate
        shell: bash
        run: |
          env
          test_harness=()
          if "${{ matrix.extensive-tests || false }}" && [ "${{ matrix.os }}" != "windows-latest" ]
          then
            1>&2 echo "Running with fuseki"
            test_harness+="./with-fuseki.sh"
          fi
          # if [ -n "${{ matrix.run-flake8 }}" ]
          # then
          #   MYPY_COMMAND= tox -e py"${MATRIX_PYTHON_VERSION//./}" -- flake8 --exit-zero rdflib
          # fi
          # export TOXENV="${{ matrix.TOXENV }}"
          "${test_harness[@]}" python -m tox
        env:
            GH_TOX_KEY: ${{ matrix.os }}-${{ matrix.python-version }}
